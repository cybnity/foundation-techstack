<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.cybnity</groupId>
	<artifactId>techstack</artifactId>
	<version>0.30.6</version>
	<packaging>pom</packaging>
	<name>CYBNITY Official Standard Techstack</name>

	<!-- Required informations for Maven Central Repository publishing -->
	<description>Technology stack of CYBNITY defense platform solution</description>
	<url>https://github.com/cybnity/foundation-techstack/demonstrators-line/demonstrator-v0</url>
	<licenses>
		<license>
		<name>The Apache Software License, Version 2.0</name>
		<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
		</license>
	</licenses>
	<developers>
		<developer>
			<id>o.lemee</id>
			<name>Olivier Lemee</name>
			<email>olivier@cybnity.org</email>
			<organization>CYBNITY</organization>
			<organizationUrl>http://www.cybnity.org</organizationUrl>
			<timezone>FR</timezone>
			<roles>
				<role>CYBNITY Founder</role>
				<role>Product Leader</role>
				<role>Product Designer</role>
				<role>Software Designer</role>
				<role>Software Developer</role>
				<role>Software Reviewer</role>
			</roles>
		</developer>
	</developers>
	<scm>
		<connection>scm:git:git://github.com/cybnity/foundation-techstack.git</connection>
		<developerConnection>scm:git:https://github.com:cybnity/foundation-techstack.git</developerConnection>
		<url>http://github.com/cybnity/foundation-techstack/tree/main</url>
	</scm>

	<properties>
		<!-- JAVA TOOLING -->
		<maven.min-version>3.8.5</maven.min-version>
		<java.version>11</java.version>
		<!-- Align Maven default configuration about JDK version to use -->
		<maven.compiler.source>${java.version}</maven.compiler.source>
		<maven.compiler.target>${java.version}</maven.compiler.target>
		<maven.compiler.release>${java.version}</maven.compiler.release>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- Activate warning about java deprecations (deprecation) or without (unchecked) -->
		<lint.activation>deprecation</lint.activation>

		<!-- Artefacts signature key name dedicated to CYBNITY components and available from https://keys.openpgpg.org-->
		<gpg.keyname>33105BFD367D25B3</gpg.keyname>

		<!-- TECHSTACK STANDARD TECHNOLOGIES -->
		<vertx.version>4.4.8</vertx.version> <!-- [4.3.2,) -->
		<janusgraph.driver>[1.1.0,)</janusgraph.driver>
		<junit-jupiter.version>5.9.3</junit-jupiter.version> <!-- 5.7.0 -->
		<junit-jupiter-platform.version>[1.9.2,)</junit-jupiter-platform.version>
		<cucumber.version>7.12.1</cucumber.version>

		<!-- Docker base images reusable by CYBNITY containerized modules -->

		<!-- The JRE base image extended (based on https://hub.docker.com/_/eclipse-temurin description) including pre-installed Temurin JVM -->
		<!-- Example of other images based on Temurin JVM (eclipse-temurin:11-alpine, eclipse-temurin:11.0.15_10-jre-alpine -->
		<docker.jre.image.name>eclipse-temurin:11-jre-alpine</docker.jre.image.name>

		<!-- The stable Zookeeper (3.7.1) base image (see https://hub.docker.com/_/zookeeper), based on Temurin JVM -->
		<docker.zookeeper.image.name>zookeeper:3.7.1-temurin</docker.zookeeper.image.name>
	</properties>

	<organization>
		<name>CYBNITY</name>
		<url>http://www.cybnity.org</url>
	</organization>

	<distributionManagement>
		<snapshotRepository>
			<!-- AGNet repository providing latest CYBNITY snapshots -->
			<id>agnet</id>
			<name>AG Net snapshots repository</name>
			<uniqueVersion>false</uniqueVersion>
			<url>https://nexus.agnet.fr/repository/cybnity-snapshots</url>
		</snapshotRepository>
		<repository>
			<!-- AGNet repository providing official CYBNITY releases -->
			<id>agnet</id>
			<name>AG Net releases repository</name>
			<uniqueVersion>true</uniqueVersion>
			<url>https://nexus.agnet.fr/repository/cybnity-releases</url>
		</repository>
	</distributionManagement>

	<!-- Tech stack official dependency versions -->
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-stack-depchain</artifactId>
				<version>${vertx.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.junit</groupId>
				<artifactId>junit-bom</artifactId>
				<version>${junit-jupiter.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>uk.org.webcompere</groupId>
				<artifactId>system-stubs-jupiter</artifactId>
				<version>[2.0.2,)</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.junit.platform</groupId>
				<artifactId>junit-platform-suite</artifactId>
				<version>${junit-jupiter-platform.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<!-- io.netty.resolver.dns.DnsServerAddressStreamProviders ignored about 'io.netty:netty-resolver-dns-native-macos" AVERTISSEMENT on Mac -->
				<groupId>io.netty</groupId>
				<artifactId>netty-all</artifactId>
				<version>[4.1.106.Final,)</version>
				<scope>test</scope>
			</dependency>
            <dependency>
                <groupId>io.cucumber</groupId>
                <artifactId>cucumber-bom</artifactId>
                <version>${cucumber.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
			<dependency>
				<!-- Embedded Redis test server (https://github.com/signalapp/embedded-redis) -->
				<groupId>org.signal</groupId>
				<artifactId>embedded-redis</artifactId>
				<version>[0.8.3,)</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-junit5</artifactId>
				<version>${vertx.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-unit</artifactId>
				<version>${vertx.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-core</artifactId>
				<version>${vertx.version}</version>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-web</artifactId>
				<version>${vertx.version}</version>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-web-client</artifactId>
				<version>${vertx.version}</version>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-redis-client</artifactId>
				<version>${vertx.version}</version>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-auth-oauth2</artifactId>
				<version>${vertx.version}</version>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-auth-jwt</artifactId>
				<version>${vertx.version}</version>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-config</artifactId>
				<version>${vertx.version}</version>
			</dependency>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-kafka-client</artifactId>
				<version>${vertx.version}</version>
			</dependency>
			<dependency>
				<groupId>redis.clients</groupId>
				<artifactId>jedis</artifactId>
				<version>[4.2.3,)</version>
			</dependency>
			<dependency>
				<groupId>io.lettuce</groupId>
				<artifactId>lettuce-core</artifactId>
				<version>[6.2.0.RELEASE,)</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson</groupId>
				<artifactId>jackson-bom</artifactId>
				<version>2.16.0</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
			<!-- JanusGraph and Gremlin client connector approach -->
			<dependency>
				<groupId>org.janusgraph</groupId>
				<artifactId>janusgraph-driver</artifactId>
				<version>${janusgraph.driver}</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<!-- Embedded in-memory graph -->
				<groupId>org.janusgraph</groupId>
				<artifactId>janusgraph-inmemory</artifactId>
				<version>[1.0.0,)</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.janusgraph</groupId>
				<artifactId>janusgraph-test</artifactId>
				<version>${janusgraph.driver}</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!-- Common and projects transversal dependencies -->
	<dependencies>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.platform</groupId>
			<artifactId>junit-platform-suite</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<!-- Lits of advise about project -->
	<mailingLists>
		<mailingList>
			<name>${project.name} developers list</name>
		</mailingList>
		<mailingList>
			<name>${project.name} testers list</name>
		</mailingList>
		<mailingList>
			<name>${project.name} users list</name>
		</mailingList>
	</mailingLists>

	<!-- Build chain configuration -->
	<build>
		<directory>target</directory>
		<outputDirectory>target/classes</outputDirectory>
		<finalName>${project.artifactId}-${project.version}</finalName>
		<testOutputDirectory>target/test-classes</testOutputDirectory>
		<sourceDirectory>src/main/java</sourceDirectory>
		<scriptSourceDirectory>src/main/scripts</scriptSourceDirectory>
		<testSourceDirectory>src/test/java</testSourceDirectory>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
			<!--
			<resource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</resource>-->
		</resources>
		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
			<testResource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
		<pluginManagement>
			<plugins>
				<plugin>
					<!-- Allow signature of components before to publish them in Maven repository -->
					<!-- See https://central.sonatype.org/publish/publish-maven/#gpg-signed-components documentation -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-gpg-plugin</artifactId>
					<version>3.2.4</version>
					<configuration>
						<!-- Prevent gpg from using pinentry programs -->
						<gpgArguments>
							<arg>--pinentry-mode</arg>
							<arg>loopback</arg>
						</gpgArguments>
					</configuration>
					<executions>
						<execution>
							<id>sign-artifacts</id>
							<phase>verify</phase>
							<goals>
								<goal>sign</goal>
							</goals>
							<configuration>
								<keyname>${gpg.keyname}</keyname>
								<passphraseServerId>${gpg.keyname}</passphraseServerId>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.10.1</version>
					<configuration>
						<showDeprecation>false</showDeprecation>
						<showWarnings>true</showWarnings>
						<!-- Use release node alone in place of source & target nodes when equals value (8, 9, 11, 12) -->
						<source>${java.version}</source>
						<target>${java.version}</target>
						<compilerVersion>${java.version}</compilerVersion>
						<release>${maven.compiler.target}</release>
						<encoding>${project.build.sourceEncoding}</encoding>
						<compilerArgument>-Xlint:${lint.activation}</compilerArgument>
					</configuration>
				</plugin>
				<!-- Tests execution management -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>3.0.0-M7</version>
					<!--
					<dependencies>
						<dependency>
							<groupId>org.junit.platform</groupId>
							<artifactId>junit-platform-surefire-provider</artifactId>
							<version>[1.3.2,)</version>
						</dependency>
					</dependencies>-->
					<configuration>
						<includes>
							<include>**/*UseCaseTest.java</include>
							<include>**/*Test.java</include>
						</includes>
						<skip>false</skip>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.2.0</version>
					<configuration>
						<encoding>${project.build.sourceEncoding}</encoding>
						<propertiesEncoding>${project.build.sourceEncoding}</propertiesEncoding>
						<nonFilteredFileExtensions>
							<nonFilteredFileExtension>jar</nonFilteredFileExtension>
							<nonFilteredFileExtension>gif</nonFilteredFileExtension>
							<nonFilteredFileExtension>jpeg</nonFilteredFileExtension>
							<nonFilteredFileExtension>jpg</nonFilteredFileExtension>
							<nonFilteredFileExtension>png</nonFilteredFileExtension>
							<nonFilteredFileExtension>xls</nonFilteredFileExtension>
							<nonFilteredFileExtension>otf</nonFilteredFileExtension>
						</nonFilteredFileExtensions>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.2.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-changes-plugin</artifactId>
					<version>2.12.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>3.0.0-M2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>3.2.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>4.0.0-M5</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>3.0.0-M5</version>
				</plugin>
				<plugin>
				  <artifactId>maven-install-plugin</artifactId>
				  <version>2.4</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>3.3.0</version>
					<configuration>
						<descriptorRefs>
							<descriptorRef>jar-with-dependencies</descriptorRef>
						</descriptorRefs>
					</configuration>
				</plugin>
				<plugin>
					<groupId>io.fabric8</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>0.41.0</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>flatten-maven-plugin</artifactId>
					<version>1.3.0</version>
					<configuration>
						<flattenMode>resolveCiFriendliesOnly</flattenMode>
						<updatePomFile>true</updatePomFile>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.4.0</version>
				</plugin>
				<plugin>
					<artifactId>maven-shade-plugin</artifactId>
					<version>3.2.4</version>
					<executions>
						<execution>
							<phase>package</phase>
							<goals>
								<goal>shade</goal>
							</goals>
							<configuration>
								<transformers>
									<transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
										<manifestEntries>
											<Main-Class>io.vertx.core.Launcher</Main-Class>
											<!--
											<Main-Verticle>${main.verticle}</Main-Verticle>
											-->
										</manifestEntries>
									</transformer>
									<transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer" />
								</transformers>
								<outputFile>${project.build.directory}/${project.artifactId}-${project.version}-fat.jar</outputFile>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>3.0.0</version>
					<configuration>
						<mainClass>io.vertx.core.Launcher</mainClass>
						<!--
						<arguments>
							<argument>run</argument>
							<argument>${main.verticle}</argument>
						</arguments>
						-->
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>3.3.1</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<phase>verify</phase>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>3.7.0</version>
					<executions>
						<execution>
							<id>attach-javadocs</id>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-release-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<executions>
					<execution>
						<id>site</id>
						<goals>
							<goal>attach-descriptor</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>flatten-maven-plugin</artifactId>
				<executions>
				<execution>
					<id>flatten</id>
					<phase>process-resources</phase>
					<goals>
					<goal>flatten</goal>
					</goals>
				</execution>
				<execution>
					<id>flatten.clean</id>
					<phase>clean</phase>
					<goals>
					<goal>clean</goal>
					</goals>
				</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-changes-plugin</artifactId>
			</plugin>
			<plugin>
			  <artifactId>maven-install-plugin</artifactId>
			  <configuration>
				<!-- Generate checksum validated during deployment process -->
			    <createChecksum>true</createChecksum>
			  </configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	<reporting>
		<outputDirectory>target/site</outputDirectory>
	</reporting>

	<profiles>
		<profile>
			<!-- Developer workstation environment -->
			<id>localhost</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<!-- Generate and include javadoc files in packaged deliverable allowing resolution by developer -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Shared development platform between developers -->
			<id>dev-deploy-environment</id>
			<activation>
				<property>
					<!-- Activation based on -D system property (e.g command line with -Denvironment=dev-deploy) -->
					<name>environment</name>
					<value>dev-deploy</value>
				</property>
			</activation>
		</profile>

		<profile>
			<!-- Test environment -->
			<id>qa-environment</id>
			<activation>
				<property>
					<!-- Activation based on -D system property (e.g command line with -Denvironment=qa) -->
					<name>environment</name>
					<value>qa</value>
				</property>
			</activation>
		</profile>

		<profile>
			<!-- Build phase regarding a software version development -->
			<id>commit-stage</id>
			<activation>
				<property>
					<!-- Activation based on -D system property (e.g command line with -Dstage=commit) -->
					<name>stage</name>
					<value>commit</value>
				</property>
			</activation>

			<build>
				<plugins>
					<plugin>
						<!-- Allow signature of components before to publish them in Maven repository -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
					</plugin>
					<plugin>
						<!-- Add javasource in packaged jar -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
					</plugin>
					<plugin>
						<!-- Generate and include javadoc files in packaged deliverable -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Phase of technical quality validation of a software version -->
			<id>technical-quality-stage</id>
			<activation>
				<property>
					<!-- Activation based on -D system property (e.g command line with -Dstage=technical-quality) -->
					<name>stage</name>
					<value>technical-quality</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>resolve-dependency</id>
								<phase>validate</phase>
								<configuration>
									<silent>false</silent>
								</configuration>
								<goals>
									<!-- Try to resolve all test scope -->
									<goal>resolve</goal>
									<!-- Try to resolve plugins and optionnaly their dependencies -->
									<goal>resolve-plugins</goal>
								</goals>
							</execution>
							<execution>
								<id>analyze-dependencies</id>
								<phase>validate</phase>
								<goals>
									<!-- Determine missing or unused dependencies -->
									<goal>analyze-dep-mgt</goal>
									<goal>analyze-duplicate</goal>
								</goals>
							</execution>
							<execution>
								<id>report-tree</id>
								<phase>validate</phase>
								<configuration>
										<outputFile>mpp-official-version-pom-tree.txt</outputFile>
										<outputType>text</outputType>
										<appendOutput>false</appendOutput>
								</configuration>
								<goals>
									<!-- Show the dependency hierarchy of the project and dependencies versions managed by the parent pom.xml -->
									<goal>tree</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<!-- Allow signature of components before to publish them in Maven repository -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
					</plugin>
					<plugin>
						<!-- Add javasource in packaged jar -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
					</plugin>
					<plugin>
						<!-- Generate and include javadoc files in packaged deliverable -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Phase of integration quality validation of a software version (e.g on an test environment) -->
			<id>integration-quality-stage</id>
			<activation>
				<property>
					<!-- Activation based on -D system property (e.g command line with -Dstage=integration-quality) -->
					<name>stage</name>
					<value>integration-quality</value>
				</property>
			</activation>
		</profile>

		<profile>
			<!-- Step of software behavior validation by testers community (e.g regarding a software beta release) -->
			<id>user-acceptance-test-stage</id>
			<activation>
				<property>
					<!-- Activation based on -D system property (e.g command line with -Dstage=user-acceptance-test) -->
					<name>stage</name>
					<value>user-acceptance-test</value>
				</property>
			</activation>
		</profile>
	</profiles>
</project>
